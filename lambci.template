{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambCI function and supporting services (see github.com/lambci/lambci for documentation)",
  "Parameters": {
    "Version": {
      "Description": "LambCI version",
      "Type": "String",
      "Default": "0.9.13"
    },
    "GithubToken": {
      "Description": "GitHub OAuth token",
      "Type": "String",
      "Default": "",
      "NoEcho" : true,
      "AllowedPattern": "^$|^[0-9a-f]{40}$",
      "ConstraintDescription": "Must be empty or a 40 char GitHub token"
    },
    "Repositories": {
      "Description": "(optional) GitHub repos to add hook to, eg: facebook/react,emberjs/ember.js",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "SlackToken": {
      "Description": "(optional) Slack API token",
      "Type": "String",
      "Default": "",
      "NoEcho" : true,
      "AllowedPattern": "^$|^xox.-[0-9]+-.+",
      "ConstraintDescription": "Must be empty or a valid Slack token, eg: xoxb-1234"
    },
    "SlackChannel": {
      "Description": "(optional) Slack channel",
      "Type": "String",
      "Default": "#general",
      "AllowedPattern": "^$|^#.+",
      "ConstraintDescription": "Must be empty or a valid Slack channel, eg: #general"
    }
  },
  "Resources": {
    "BuildLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-build"]]},
        "Description": {"Fn::Join": ["", ["LambCI build function for stack: ", {"Ref": "AWS::StackName"}]]},
        "Handler": "index.handler",
        "MemorySize": "1536",
        "Timeout": "300",
        "Role": {"Fn::GetAtt": ["LambdaExecution", "Arn"]},
        "Code": {
          "S3Bucket": {"Fn::Join": ["", ["lambci-", {"Ref": "AWS::Region"}]]},
          "S3Key": {"Fn::Join": ["", ["fn/lambci-build-", {"Ref": "Version"}, ".zip"]]}
        },
        "Runtime": "nodejs4.3"
      }
    },
    "BuildResults": {
      "Type": "AWS::S3::Bucket"
    },
    "ConfigTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-config"]]},
        "AttributeDefinitions": [
          {"AttributeName": "project", "AttributeType": "S"}
        ],
        "KeySchema": [
          {"AttributeName": "project", "KeyType": "HASH"}
        ],
        "ProvisionedThroughput": {"ReadCapacityUnits": "1", "WriteCapacityUnits": "1"}
      }
    },
    "BuildsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-builds"]]},
        "AttributeDefinitions": [
          {"AttributeName": "project", "AttributeType": "S"},
          {"AttributeName": "buildNum", "AttributeType": "N"},
          {"AttributeName": "trigger", "AttributeType": "S"},
          {"AttributeName": "commit", "AttributeType": "S"},
          {"AttributeName": "requestId", "AttributeType": "S"}
        ],
        "KeySchema": [
          {"AttributeName": "project", "KeyType": "HASH"},
          {"AttributeName": "buildNum", "KeyType": "RANGE"}
        ],
        "ProvisionedThroughput": {"ReadCapacityUnits": "1", "WriteCapacityUnits": "1"},
        "LocalSecondaryIndexes": [{
          "IndexName": "trigger",
          "KeySchema": [
            {"AttributeName": "project", "KeyType": "HASH"},
            {"AttributeName": "trigger", "KeyType": "RANGE"}
          ],
          "Projection": {"ProjectionType": "KEYS_ONLY"}
        },{
          "IndexName": "commit",
          "KeySchema": [
            {"AttributeName": "project", "KeyType": "HASH"},
            {"AttributeName": "commit", "KeyType": "RANGE"}
          ],
          "Projection": {"ProjectionType": "KEYS_ONLY"}
        },{
          "IndexName": "requestId",
          "KeySchema": [
            {"AttributeName": "project", "KeyType": "HASH"},
            {"AttributeName": "requestId", "KeyType": "RANGE"}
          ],
          "Projection": {"ProjectionType": "KEYS_ONLY"}
        }]
      }
    },
    "InvokeTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{"Endpoint": {"Fn::GetAtt": ["BuildLambda", "Arn"]}, "Protocol": "lambda"}]
      }
    },
    "LambdaInvoke": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["BuildLambda", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {"Ref": "InvokeTopic"}
      }
    },
    "LambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "WriteLogs",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {"Fn::Join": ["", ["arn:aws:logs:*:*:log-group:/aws/lambda/", {"Ref": "AWS::StackName"}, "-*"]]}
            }
          }
        },{
          "PolicyName": "ReadWriteBucket",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "BuildResults"}, "/*"]]}
            }
          }
        },{
          "PolicyName": "ReadTables",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan"
              ],
              "Resource": {"Fn::Join": ["", ["arn:aws:dynamodb:*:*:table/", {"Ref": "AWS::StackName"}, "-*"]]}
            }
          }
        },{
          "PolicyName": "WriteTables",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:DeleteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {"Fn::Join": ["", ["arn:aws:dynamodb:*:*:table/", {"Ref": "AWS::StackName"}, "-config"]]},
                {"Fn::Join": ["", ["arn:aws:dynamodb:*:*:table/", {"Ref": "AWS::StackName"}, "-builds"]]}
              ]
            }
          }
        },{
          "PolicyName": "UpdateSnsTopic",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": "sns:SetTopicAttributes",
              "Resource": {"Fn::Join": ["", ["arn:aws:sns:*:*:", {"Ref": "AWS::StackName"}, "-*"]]}
            }
          }
        }]
      }
    },
    "SnsSender": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Policies": [{
          "PolicyName": "PublishOnly",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": "sns:Publish",
              "Resource": {"Ref": "InvokeTopic"}
            }
          }
        }]
      }
    },
    "SnsAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {"Ref": "SnsSender"}
      }
    },
    "SnsFailures": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "sns.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "WriteLogs",
          "PolicyDocument": {
            "Statement": {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:PutMetricFilter",
                "logs:PutRetentionPolicy"
              ],
              "Resource": {"Fn::Join": ["", ["arn:aws:logs:*:*:log-group:sns/*/*/", {"Fn::GetAtt": ["InvokeTopic", "TopicName"]}, "/*"]]}
            }
          }
        }]
      }
    },
    "ConfigUpdater": {
      "Type": "Custom::ConfigUpdater",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["BuildLambda", "Arn"]},
        "GithubToken": {"Ref": "GithubToken"},
        "Repositories": {"Ref": "Repositories"},
        "SlackToken": {"Ref": "SlackToken"},
        "SlackChannel": {"Ref": "SlackChannel"},
        "S3Bucket": {"Ref": "BuildResults"},
        "SnsTopic": {"Ref": "InvokeTopic"},
        "SnsAccessKey": {"Ref": "SnsAccessKey"},
        "SnsSecret": {"Fn::GetAtt": ["SnsAccessKey", "SecretAccessKey"]},
        "SnsFailuresRole": {"Fn::GetAtt": ["SnsFailures", "Arn"]}
      }
    }
  },
  "Outputs": {
    "S3Bucket": {
      "Description": "Name of the build results S3 bucket, see github.com/lambci/lambci",
      "Value": {"Ref": "BuildResults"},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-S3Bucket"}}
    },
    "SnsTopic": {
      "Description": "Enter this for 'Sns topic' at github.com/<repo>/settings/hooks/new?service=amazonsns",
      "Value": {"Ref": "InvokeTopic"},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-SnsTopic"}}
    },
    "SnsRegion": {
      "Description": "Enter this for 'Sns region' at github.com/<repo>/settings/hooks/new?service=amazonsns",
      "Value": {"Ref": "AWS::Region"},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-SnsRegion"}}
    },
    "SnsAccessKey": {
      "Description": "Enter this for 'Aws key' at github.com/<repo>/settings/hooks/new?service=amazonsns",
      "Value": {"Ref": "SnsAccessKey"},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-SnsAccessKey"}}
    },
    "SnsSecret": {
      "Description": "Enter this for 'Aws secret' at github.com/<repo>/settings/hooks/new?service=amazonsns",
      "Value": {"Fn::GetAtt": ["SnsAccessKey", "SecretAccessKey"]},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-SnsSecret"}}
    },
    "LambdaExecution": {
      "Description": "Name of the Lambda Execution Role. Attach additional managed policies to give Lambda more permissions.",
      "Value": {"Ref": "LambdaExecution"},
      "Export": {"Name": {"Fn::Sub": "${AWS::StackName}-LambdaExecution"}}
    }
  }
}
